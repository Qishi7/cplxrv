// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cplx2real_cov_cpp
arma::mat cplx2real_cov_cpp(arma::mat var, arma::cx_double rho);
RcppExport SEXP _cplxrv_cplx2real_cov_cpp(SEXP varSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type var(varSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(cplx2real_cov_cpp(var, rho));
    return rcpp_result_gen;
END_RCPP
}
// dmvn_cpp
arma::vec dmvn_cpp(arma::mat x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP _cplxrv_dmvn_cpp(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvn_cpp(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// eta_to_rho_cpp
double eta_to_rho_cpp(double eta, double a);
RcppExport SEXP _cplxrv_eta_to_rho_cpp(SEXP etaSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(eta_to_rho_cpp(eta, a));
    return rcpp_result_gen;
END_RCPP
}
// get_tune_cpp
double get_tune_cpp(double tune, double keep, int iter, double step, double exp_term, double target);
RcppExport SEXP _cplxrv_get_tune_cpp(SEXP tuneSEXP, SEXP keepSEXP, SEXP iterSEXP, SEXP stepSEXP, SEXP exp_termSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tune(tuneSEXP);
    Rcpp::traits::input_parameter< double >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< double >::type exp_term(exp_termSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tune_cpp(tune, keep, iter, step, exp_term, target));
    return rcpp_result_gen;
END_RCPP
}
// inv_cpp
arma::mat inv_cpp(arma::mat m1);
RcppExport SEXP _cplxrv_inv_cpp(SEXP m1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m1(m1SEXP);
    rcpp_result_gen = Rcpp::wrap(inv_cpp(m1));
    return rcpp_result_gen;
END_RCPP
}
// invtau2j_bl_cpp
double invtau2j_bl_cpp(arma::mat beta, int j, double sig2, double lambda2);
RcppExport SEXP _cplxrv_invtau2j_bl_cpp(SEXP betaSEXP, SEXP jSEXP, SEXP sig2SEXP, SEXP lambda2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    rcpp_result_gen = Rcpp::wrap(invtau2j_bl_cpp(beta, j, sig2, lambda2));
    return rcpp_result_gen;
END_RCPP
}
// keep_elem
arma::uvec keep_elem(const arma::vec& x, const arma::ivec& to_remove);
RcppExport SEXP _cplxrv_keep_elem(SEXP xSEXP, SEXP to_removeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type to_remove(to_removeSEXP);
    rcpp_result_gen = Rcpp::wrap(keep_elem(x, to_remove));
    return rcpp_result_gen;
END_RCPP
}
// beta_bl_cpp
arma::mat beta_bl_cpp(arma::mat& XtX, arma::mat& XtY, double sig2, arma::vec& invtau2);
RcppExport SEXP _cplxrv_beta_bl_cpp(SEXP XtXSEXP, SEXP XtYSEXP, SEXP sig2SEXP, SEXP invtau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invtau2(invtau2SEXP);
    rcpp_result_gen = Rcpp::wrap(beta_bl_cpp(XtX, XtY, sig2, invtau2));
    return rcpp_result_gen;
END_RCPP
}
// lam2_bl_cpp
double lam2_bl_cpp(arma::vec& invtau2, int p, double r, double delta);
RcppExport SEXP _cplxrv_lam2_bl_cpp(SEXP invtau2SEXP, SEXP pSEXP, SEXP rSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type invtau2(invtau2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(lam2_bl_cpp(invtau2, p, r, delta));
    return rcpp_result_gen;
END_RCPP
}
// invtau2_bl_cpp
arma::vec invtau2_bl_cpp(arma::mat& beta, double sig2, double lam2);
RcppExport SEXP _cplxrv_invtau2_bl_cpp(SEXP betaSEXP, SEXP sig2SEXP, SEXP lam2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    rcpp_result_gen = Rcpp::wrap(invtau2_bl_cpp(beta, sig2, lam2));
    return rcpp_result_gen;
END_RCPP
}
// sig2_bl_cpp
double sig2_bl_cpp(arma::mat& YtY, arma::mat& XtY, arma::mat& XtX, arma::mat& beta, arma::vec& invtau2, int n, int p, double asig, double bsig);
RcppExport SEXP _cplxrv_sig2_bl_cpp(SEXP YtYSEXP, SEXP XtYSEXP, SEXP XtXSEXP, SEXP betaSEXP, SEXP invtau2SEXP, SEXP nSEXP, SEXP pSEXP, SEXP asigSEXP, SEXP bsigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type YtY(YtYSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invtau2(invtau2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type asig(asigSEXP);
    Rcpp::traits::input_parameter< double >::type bsig(bsigSEXP);
    rcpp_result_gen = Rcpp::wrap(sig2_bl_cpp(YtY, XtY, XtX, beta, invtau2, n, p, asig, bsig));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_bl_cpp
List mcmc_bl_cpp(int n_mcmc, int warm, int thin, arma::mat beta, arma::vec tau2, double lam2, double sig2, arma::vec& y, arma::mat& X, double r, double delta, double a_sig, double b_sig, arma::mat draws);
RcppExport SEXP _cplxrv_mcmc_bl_cpp(SEXP n_mcmcSEXP, SEXP warmSEXP, SEXP thinSEXP, SEXP betaSEXP, SEXP tau2SEXP, SEXP lam2SEXP, SEXP sig2SEXP, SEXP ySEXP, SEXP XSEXP, SEXP rSEXP, SEXP deltaSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type warm(warmSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< double >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type draws(drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_bl_cpp(n_mcmc, warm, thin, beta, tau2, lam2, sig2, y, X, r, delta, a_sig, b_sig, draws));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma1
arma::mat mvrnormArma1(arma::vec mu, arma::mat sigma);
RcppExport SEXP _cplxrv_mvrnormArma1(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma1(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma_inv
arma::mat mvrnormArma_inv(arma::vec mu, arma::mat sigma_inv);
RcppExport SEXP _cplxrv_mvrnormArma_inv(SEXP muSEXP, SEXP sigma_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_inv(sigma_invSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma_inv(mu, sigma_inv));
    return rcpp_result_gen;
END_RCPP
}
// beta_cbl_cpp
arma::mat beta_cbl_cpp(arma::vec y, arma::mat X, arma::mat beta, List Sigj_inv_lst, arma::sp_mat& Vinv, double sig2, int p, arma::vec all_ind, List select_idx_lst, List Xj_lst);
RcppExport SEXP _cplxrv_beta_cbl_cpp(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP Sigj_inv_lstSEXP, SEXP VinvSEXP, SEXP sig2SEXP, SEXP pSEXP, SEXP all_indSEXP, SEXP select_idx_lstSEXP, SEXP Xj_lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< List >::type Sigj_inv_lst(Sigj_inv_lstSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type Vinv(VinvSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type all_ind(all_indSEXP);
    Rcpp::traits::input_parameter< List >::type select_idx_lst(select_idx_lstSEXP);
    Rcpp::traits::input_parameter< List >::type Xj_lst(Xj_lstSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_cbl_cpp(y, X, beta, Sigj_inv_lst, Vinv, sig2, p, all_ind, select_idx_lst, Xj_lst));
    return rcpp_result_gen;
END_RCPP
}
// ga_cbl_cpp
arma::vec ga_cbl_cpp(double lam2, double sig2, arma::vec btb, int p);
RcppExport SEXP _cplxrv_ga_cbl_cpp(SEXP lam2SEXP, SEXP sig2SEXP, SEXP btbSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type btb(btbSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ga_cbl_cpp(lam2, sig2, btb, p));
    return rcpp_result_gen;
END_RCPP
}
// sig2_cbl_cpp
double sig2_cbl_cpp(double asig, double bsig, int n, int p, arma::vec y, arma::vec mu, arma::vec tau2, arma::vec btb, arma::sp_mat Vinv);
RcppExport SEXP _cplxrv_sig2_cbl_cpp(SEXP asigSEXP, SEXP bsigSEXP, SEXP nSEXP, SEXP pSEXP, SEXP ySEXP, SEXP muSEXP, SEXP tau2SEXP, SEXP btbSEXP, SEXP VinvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type asig(asigSEXP);
    Rcpp::traits::input_parameter< double >::type bsig(bsigSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type btb(btbSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type Vinv(VinvSEXP);
    rcpp_result_gen = Rcpp::wrap(sig2_cbl_cpp(asig, bsig, n, p, y, mu, tau2, btb, Vinv));
    return rcpp_result_gen;
END_RCPP
}
// lam2_cbl_cpp
double lam2_cbl_cpp(arma::vec tau2, double r, double delta, int p);
RcppExport SEXP _cplxrv_lam2_cbl_cpp(SEXP tau2SEXP, SEXP rSEXP, SEXP deltaSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(lam2_cbl_cpp(tau2, r, delta, p));
    return rcpp_result_gen;
END_RCPP
}
// mh_log_re_cpp
double mh_log_re_cpp(double eta_re, double rho_im, arma::rowvec mut, arma::mat ymat, arma::mat sig2I);
RcppExport SEXP _cplxrv_mh_log_re_cpp(SEXP eta_reSEXP, SEXP rho_imSEXP, SEXP mutSEXP, SEXP ymatSEXP, SEXP sig2ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eta_re(eta_reSEXP);
    Rcpp::traits::input_parameter< double >::type rho_im(rho_imSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mut(mutSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sig2I(sig2ISEXP);
    rcpp_result_gen = Rcpp::wrap(mh_log_re_cpp(eta_re, rho_im, mut, ymat, sig2I));
    return rcpp_result_gen;
END_RCPP
}
// mh_log_im_cpp
double mh_log_im_cpp(double rho_re, double eta_im, arma::rowvec mut, arma::mat ymat, arma::mat sig2I);
RcppExport SEXP _cplxrv_mh_log_im_cpp(SEXP rho_reSEXP, SEXP eta_imSEXP, SEXP mutSEXP, SEXP ymatSEXP, SEXP sig2ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho_re(rho_reSEXP);
    Rcpp::traits::input_parameter< double >::type eta_im(eta_imSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mut(mutSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sig2I(sig2ISEXP);
    rcpp_result_gen = Rcpp::wrap(mh_log_im_cpp(rho_re, eta_im, mut, ymat, sig2I));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_cbl_cpp
List mcmc_cbl_cpp(const int& n_mcmc, const int& warm, const int& thin, arma::mat beta, arma::vec tau2, double lam2, double sig2, arma::vec y, arma::mat& X, arma::cx_double rho_b, arma::cx_double rho_ep, const double& r, const double& delta, double a_sig, double b_sig, const bool& learn_rho, const int& n_chains, double keep_re, double keep_im, double tune_re, double tune_im, int& tune_len, bool& adapt, const double& adapt_step, const double& target_accept_rate, arma::mat draws);
RcppExport SEXP _cplxrv_mcmc_cbl_cpp(SEXP n_mcmcSEXP, SEXP warmSEXP, SEXP thinSEXP, SEXP betaSEXP, SEXP tau2SEXP, SEXP lam2SEXP, SEXP sig2SEXP, SEXP ySEXP, SEXP XSEXP, SEXP rho_bSEXP, SEXP rho_epSEXP, SEXP rSEXP, SEXP deltaSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP learn_rhoSEXP, SEXP n_chainsSEXP, SEXP keep_reSEXP, SEXP keep_imSEXP, SEXP tune_reSEXP, SEXP tune_imSEXP, SEXP tune_lenSEXP, SEXP adaptSEXP, SEXP adapt_stepSEXP, SEXP target_accept_rateSEXP, SEXP drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< const int& >::type warm(warmSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type rho_b(rho_bSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type rho_ep(rho_epSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< double >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< const bool& >::type learn_rho(learn_rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_chains(n_chainsSEXP);
    Rcpp::traits::input_parameter< double >::type keep_re(keep_reSEXP);
    Rcpp::traits::input_parameter< double >::type keep_im(keep_imSEXP);
    Rcpp::traits::input_parameter< double >::type tune_re(tune_reSEXP);
    Rcpp::traits::input_parameter< double >::type tune_im(tune_imSEXP);
    Rcpp::traits::input_parameter< int& >::type tune_len(tune_lenSEXP);
    Rcpp::traits::input_parameter< bool& >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< const double& >::type adapt_step(adapt_stepSEXP);
    Rcpp::traits::input_parameter< const double& >::type target_accept_rate(target_accept_rateSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type draws(drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_cbl_cpp(n_mcmc, warm, thin, beta, tau2, lam2, sig2, y, X, rho_b, rho_ep, r, delta, a_sig, b_sig, learn_rho, n_chains, keep_re, keep_im, tune_re, tune_im, tune_len, adapt, adapt_step, target_accept_rate, draws));
    return rcpp_result_gen;
END_RCPP
}
// beta_cgdp_cpp
arma::mat beta_cgdp_cpp(arma::vec& y, arma::mat& X, arma::mat beta, List& Sigj_inv_lst, arma::mat& Vinv, double sig2, int& p, arma::vec& all_ind, List& select_idx_lst, List& Xj_lst);
RcppExport SEXP _cplxrv_beta_cgdp_cpp(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP Sigj_inv_lstSEXP, SEXP VinvSEXP, SEXP sig2SEXP, SEXP pSEXP, SEXP all_indSEXP, SEXP select_idx_lstSEXP, SEXP Xj_lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< List& >::type Sigj_inv_lst(Sigj_inv_lstSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Vinv(VinvSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type all_ind(all_indSEXP);
    Rcpp::traits::input_parameter< List& >::type select_idx_lst(select_idx_lstSEXP);
    Rcpp::traits::input_parameter< List& >::type Xj_lst(Xj_lstSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_cgdp_cpp(y, X, beta, Sigj_inv_lst, Vinv, sig2, p, all_ind, select_idx_lst, Xj_lst));
    return rcpp_result_gen;
END_RCPP
}
// ga_cgdp_cpp
arma::vec ga_cgdp_cpp(arma::vec lam, double sig2, arma::vec& btb, int& p);
RcppExport SEXP _cplxrv_ga_cgdp_cpp(SEXP lamSEXP, SEXP sig2SEXP, SEXP btbSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type btb(btbSEXP);
    Rcpp::traits::input_parameter< int& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ga_cgdp_cpp(lam, sig2, btb, p));
    return rcpp_result_gen;
END_RCPP
}
// sig2_cgdp_cpp
double sig2_cgdp_cpp(double asig, double bsig, int n, int p, arma::vec& y, arma::vec& mu, arma::vec tau2, arma::vec& btb, arma::mat& Vinv);
RcppExport SEXP _cplxrv_sig2_cgdp_cpp(SEXP asigSEXP, SEXP bsigSEXP, SEXP nSEXP, SEXP pSEXP, SEXP ySEXP, SEXP muSEXP, SEXP tau2SEXP, SEXP btbSEXP, SEXP VinvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type asig(asigSEXP);
    Rcpp::traits::input_parameter< double >::type bsig(bsigSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type btb(btbSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Vinv(VinvSEXP);
    rcpp_result_gen = Rcpp::wrap(sig2_cgdp_cpp(asig, bsig, n, p, y, mu, tau2, btb, Vinv));
    return rcpp_result_gen;
END_RCPP
}
// lam_cgdp_cpp
arma::vec lam_cgdp_cpp(arma::vec& btb, double alpha, double eta, double sig2, int& p);
RcppExport SEXP _cplxrv_lam_cgdp_cpp(SEXP btbSEXP, SEXP alphaSEXP, SEXP etaSEXP, SEXP sig2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type btb(btbSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< int& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(lam_cgdp_cpp(btb, alpha, eta, sig2, p));
    return rcpp_result_gen;
END_RCPP
}
// mh_log_ratio_re_cpp_gdp
double mh_log_ratio_re_cpp_gdp(double eta_re, double eta_re_star, double rho_im, arma::vec& mu, arma::vec& yr, double sig2, int& n, arma::mat& I);
RcppExport SEXP _cplxrv_mh_log_ratio_re_cpp_gdp(SEXP eta_reSEXP, SEXP eta_re_starSEXP, SEXP rho_imSEXP, SEXP muSEXP, SEXP yrSEXP, SEXP sig2SEXP, SEXP nSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eta_re(eta_reSEXP);
    Rcpp::traits::input_parameter< double >::type eta_re_star(eta_re_starSEXP);
    Rcpp::traits::input_parameter< double >::type rho_im(rho_imSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(mh_log_ratio_re_cpp_gdp(eta_re, eta_re_star, rho_im, mu, yr, sig2, n, I));
    return rcpp_result_gen;
END_RCPP
}
// mh_log_ratio_im_cpp_gdp
double mh_log_ratio_im_cpp_gdp(double rho_re, double eta_im, double eta_im_star, arma::vec& mu, arma::vec& yr, double sig2, int& n, arma::mat& I);
RcppExport SEXP _cplxrv_mh_log_ratio_im_cpp_gdp(SEXP rho_reSEXP, SEXP eta_imSEXP, SEXP eta_im_starSEXP, SEXP muSEXP, SEXP yrSEXP, SEXP sig2SEXP, SEXP nSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho_re(rho_reSEXP);
    Rcpp::traits::input_parameter< double >::type eta_im(eta_imSEXP);
    Rcpp::traits::input_parameter< double >::type eta_im_star(eta_im_starSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(mh_log_ratio_im_cpp_gdp(rho_re, eta_im, eta_im_star, mu, yr, sig2, n, I));
    return rcpp_result_gen;
END_RCPP
}
// a_cond_log_cgdp_cpp
arma::vec a_cond_log_cgdp_cpp(arma::vec a, int& p, arma::vec& btb, double sig2, double eta);
RcppExport SEXP _cplxrv_a_cond_log_cgdp_cpp(SEXP aSEXP, SEXP pSEXP, SEXP btbSEXP, SEXP sig2SEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type btb(btbSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(a_cond_log_cgdp_cpp(a, p, btb, sig2, eta));
    return rcpp_result_gen;
END_RCPP
}
// e_cond_log_cgdp_cpp
arma::vec e_cond_log_cgdp_cpp(arma::vec e, int& p, arma::vec& btb, double sig2, double alpha);
RcppExport SEXP _cplxrv_e_cond_log_cgdp_cpp(SEXP eSEXP, SEXP pSEXP, SEXP btbSEXP, SEXP sig2SEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type e(eSEXP);
    Rcpp::traits::input_parameter< int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type btb(btbSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(e_cond_log_cgdp_cpp(e, p, btb, sig2, alpha));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_cgdp_cpp
List mcmc_cgdp_cpp(const int& n_mcmc, const int& warm, const int& thin, arma::mat beta, arma::vec tau2, arma::vec lam, double sig2, arma::vec& y, arma::mat& X, arma::cx_double rho_b, arma::cx_double rho_ep, double alpha, double eta, double a_sig, double b_sig, const bool& learn_rho, const bool& griddy, const int& n_chains, double keep_re, double keep_im, double tune_re, double tune_im, int& tune_len, bool& adapt, const double& adapt_step, const double& target_accept_rate, arma::mat draws);
RcppExport SEXP _cplxrv_mcmc_cgdp_cpp(SEXP n_mcmcSEXP, SEXP warmSEXP, SEXP thinSEXP, SEXP betaSEXP, SEXP tau2SEXP, SEXP lamSEXP, SEXP sig2SEXP, SEXP ySEXP, SEXP XSEXP, SEXP rho_bSEXP, SEXP rho_epSEXP, SEXP alphaSEXP, SEXP etaSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP learn_rhoSEXP, SEXP griddySEXP, SEXP n_chainsSEXP, SEXP keep_reSEXP, SEXP keep_imSEXP, SEXP tune_reSEXP, SEXP tune_imSEXP, SEXP tune_lenSEXP, SEXP adaptSEXP, SEXP adapt_stepSEXP, SEXP target_accept_rateSEXP, SEXP drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< const int& >::type warm(warmSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type rho_b(rho_bSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type rho_ep(rho_epSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< double >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< const bool& >::type learn_rho(learn_rhoSEXP);
    Rcpp::traits::input_parameter< const bool& >::type griddy(griddySEXP);
    Rcpp::traits::input_parameter< const int& >::type n_chains(n_chainsSEXP);
    Rcpp::traits::input_parameter< double >::type keep_re(keep_reSEXP);
    Rcpp::traits::input_parameter< double >::type keep_im(keep_imSEXP);
    Rcpp::traits::input_parameter< double >::type tune_re(tune_reSEXP);
    Rcpp::traits::input_parameter< double >::type tune_im(tune_imSEXP);
    Rcpp::traits::input_parameter< int& >::type tune_len(tune_lenSEXP);
    Rcpp::traits::input_parameter< bool& >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< const double& >::type adapt_step(adapt_stepSEXP);
    Rcpp::traits::input_parameter< const double& >::type target_accept_rate(target_accept_rateSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type draws(drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_cgdp_cpp(n_mcmc, warm, thin, beta, tau2, lam, sig2, y, X, rho_b, rho_ep, alpha, eta, a_sig, b_sig, learn_rho, griddy, n_chains, keep_re, keep_im, tune_re, tune_im, tune_len, adapt, adapt_step, target_accept_rate, draws));
    return rcpp_result_gen;
END_RCPP
}
// beta_ct_cpp
arma::mat beta_ct_cpp(arma::mat& XtVinvy, arma::mat& Siginv, double sig2);
RcppExport SEXP _cplxrv_beta_ct_cpp(SEXP XtVinvySEXP, SEXP SiginvSEXP, SEXP sig2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type XtVinvy(XtVinvySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Siginv(SiginvSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    rcpp_result_gen = Rcpp::wrap(beta_ct_cpp(XtVinvy, Siginv, sig2));
    return rcpp_result_gen;
END_RCPP
}
// tau2_ct_cpp
arma::vec tau2_ct_cpp(arma::mat& beta, arma::cx_double rho_b, double df, int p, double sig2);
RcppExport SEXP _cplxrv_tau2_ct_cpp(SEXP betaSEXP, SEXP rho_bSEXP, SEXP dfSEXP, SEXP pSEXP, SEXP sig2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type rho_b(rho_bSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    rcpp_result_gen = Rcpp::wrap(tau2_ct_cpp(beta, rho_b, df, p, sig2));
    return rcpp_result_gen;
END_RCPP
}
// sig2_ct_cpp
double sig2_ct_cpp(double asig, double bsig, int n, int p, arma::vec y, arma::mat beta, arma::mat X, arma::mat Vinv, arma::mat Vbinv);
RcppExport SEXP _cplxrv_sig2_ct_cpp(SEXP asigSEXP, SEXP bsigSEXP, SEXP nSEXP, SEXP pSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP XSEXP, SEXP VinvSEXP, SEXP VbinvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type asig(asigSEXP);
    Rcpp::traits::input_parameter< double >::type bsig(bsigSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Vinv(VinvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Vbinv(VbinvSEXP);
    rcpp_result_gen = Rcpp::wrap(sig2_ct_cpp(asig, bsig, n, p, y, beta, X, Vinv, Vbinv));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_ct_cpp
List mcmc_ct_cpp(int n_mcmc, int warm, int thin, arma::mat beta, arma::vec tau2, double sig2, arma::vec& y, arma::mat& X, arma::cx_double rho_b, arma::cx_double rho_ep, double df, double a_sig, double b_sig, bool learn_rho, int n_chains, double keep_re, double keep_im, double tune_re, double tune_im, int tune_len, bool adapt, double& adapt_step, double target_accept_rate, arma::mat draws);
RcppExport SEXP _cplxrv_mcmc_ct_cpp(SEXP n_mcmcSEXP, SEXP warmSEXP, SEXP thinSEXP, SEXP betaSEXP, SEXP tau2SEXP, SEXP sig2SEXP, SEXP ySEXP, SEXP XSEXP, SEXP rho_bSEXP, SEXP rho_epSEXP, SEXP dfSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP learn_rhoSEXP, SEXP n_chainsSEXP, SEXP keep_reSEXP, SEXP keep_imSEXP, SEXP tune_reSEXP, SEXP tune_imSEXP, SEXP tune_lenSEXP, SEXP adaptSEXP, SEXP adapt_stepSEXP, SEXP target_accept_rateSEXP, SEXP drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type warm(warmSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type rho_b(rho_bSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type rho_ep(rho_epSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< double >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< double >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< bool >::type learn_rho(learn_rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n_chains(n_chainsSEXP);
    Rcpp::traits::input_parameter< double >::type keep_re(keep_reSEXP);
    Rcpp::traits::input_parameter< double >::type keep_im(keep_imSEXP);
    Rcpp::traits::input_parameter< double >::type tune_re(tune_reSEXP);
    Rcpp::traits::input_parameter< double >::type tune_im(tune_imSEXP);
    Rcpp::traits::input_parameter< int >::type tune_len(tune_lenSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< double& >::type adapt_step(adapt_stepSEXP);
    Rcpp::traits::input_parameter< double >::type target_accept_rate(target_accept_rateSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type draws(drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_ct_cpp(n_mcmc, warm, thin, beta, tau2, sig2, y, X, rho_b, rho_ep, df, a_sig, b_sig, learn_rho, n_chains, keep_re, keep_im, tune_re, tune_im, tune_len, adapt, adapt_step, target_accept_rate, draws));
    return rcpp_result_gen;
END_RCPP
}
// beta_gdp_cpp
arma::mat beta_gdp_cpp(arma::mat XtX, arma::mat XtY, double sig2, arma::vec invtau);
RcppExport SEXP _cplxrv_beta_gdp_cpp(SEXP XtXSEXP, SEXP XtYSEXP, SEXP sig2SEXP, SEXP invtauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type invtau(invtauSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_gdp_cpp(XtX, XtY, sig2, invtau));
    return rcpp_result_gen;
END_RCPP
}
// invtau_gdp_cpp
arma::vec invtau_gdp_cpp(arma::mat beta, double sig2, arma::vec lam);
RcppExport SEXP _cplxrv_invtau_gdp_cpp(SEXP betaSEXP, SEXP sig2SEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(invtau_gdp_cpp(beta, sig2, lam));
    return rcpp_result_gen;
END_RCPP
}
// sig2_gdp_cpp
double sig2_gdp_cpp(arma::mat YtY, arma::mat XtY, arma::mat XtX, arma::mat beta, arma::vec invtau, int n, int p, double asig, double bsig);
RcppExport SEXP _cplxrv_sig2_gdp_cpp(SEXP YtYSEXP, SEXP XtYSEXP, SEXP XtXSEXP, SEXP betaSEXP, SEXP invtauSEXP, SEXP nSEXP, SEXP pSEXP, SEXP asigSEXP, SEXP bsigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type YtY(YtYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type invtau(invtauSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type asig(asigSEXP);
    Rcpp::traits::input_parameter< double >::type bsig(bsigSEXP);
    rcpp_result_gen = Rcpp::wrap(sig2_gdp_cpp(YtY, XtY, XtX, beta, invtau, n, p, asig, bsig));
    return rcpp_result_gen;
END_RCPP
}
// lamj_gdp_cpp
double lamj_gdp_cpp(double betaj, double sig2, double alpha, double eta);
RcppExport SEXP _cplxrv_lamj_gdp_cpp(SEXP betajSEXP, SEXP sig2SEXP, SEXP alphaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type betaj(betajSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(lamj_gdp_cpp(betaj, sig2, alpha, eta));
    return rcpp_result_gen;
END_RCPP
}
// a_cond_log_cpp
arma::vec a_cond_log_cpp(arma::vec a, int p, arma::mat beta, double sig2, double eta);
RcppExport SEXP _cplxrv_a_cond_log_cpp(SEXP aSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP sig2SEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(a_cond_log_cpp(a, p, beta, sig2, eta));
    return rcpp_result_gen;
END_RCPP
}
// e_cond_log_cpp
arma::vec e_cond_log_cpp(arma::vec e, int p, arma::mat beta, double sig2, double alpha);
RcppExport SEXP _cplxrv_e_cond_log_cpp(SEXP eSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP sig2SEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type e(eSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(e_cond_log_cpp(e, p, beta, sig2, alpha));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_gdp_cpp
List mcmc_gdp_cpp(int n_mcmc, int warm, int thin, arma::mat beta, arma::vec invtau, arma::vec lam, double sig2, arma::vec& y, arma::mat& X, double a_sig, double b_sig, double alpha, double eta, bool griddy, arma::mat draws);
RcppExport SEXP _cplxrv_mcmc_gdp_cpp(SEXP n_mcmcSEXP, SEXP warmSEXP, SEXP thinSEXP, SEXP betaSEXP, SEXP invtauSEXP, SEXP lamSEXP, SEXP sig2SEXP, SEXP ySEXP, SEXP XSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP alphaSEXP, SEXP etaSEXP, SEXP griddySEXP, SEXP drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type warm(warmSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type invtau(invtauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< double >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type griddy(griddySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type draws(drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_gdp_cpp(n_mcmc, warm, thin, beta, invtau, lam, sig2, y, X, a_sig, b_sig, alpha, eta, griddy, draws));
    return rcpp_result_gen;
END_RCPP
}
// beta_t_cpp
arma::mat beta_t_cpp(arma::mat XtX, arma::mat XtY, double sig2, arma::vec tau2);
RcppExport SEXP _cplxrv_beta_t_cpp(SEXP XtXSEXP, SEXP XtYSEXP, SEXP sig2SEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(beta_t_cpp(XtX, XtY, sig2, tau2));
    return rcpp_result_gen;
END_RCPP
}
// tau2_t_cpp
arma::vec tau2_t_cpp(arma::mat beta, double atau, double btau, double sig2, int p);
RcppExport SEXP _cplxrv_tau2_t_cpp(SEXP betaSEXP, SEXP atauSEXP, SEXP btauSEXP, SEXP sig2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type atau(atauSEXP);
    Rcpp::traits::input_parameter< double >::type btau(btauSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(tau2_t_cpp(beta, atau, btau, sig2, p));
    return rcpp_result_gen;
END_RCPP
}
// sig2_t_cpp
double sig2_t_cpp(arma::vec YtY, arma::mat XtY, arma::mat XtX, arma::mat beta, arma::vec tau2, int n, int p, double asig, double bsig);
RcppExport SEXP _cplxrv_sig2_t_cpp(SEXP YtYSEXP, SEXP XtYSEXP, SEXP XtXSEXP, SEXP betaSEXP, SEXP tau2SEXP, SEXP nSEXP, SEXP pSEXP, SEXP asigSEXP, SEXP bsigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type YtY(YtYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type asig(asigSEXP);
    Rcpp::traits::input_parameter< double >::type bsig(bsigSEXP);
    rcpp_result_gen = Rcpp::wrap(sig2_t_cpp(YtY, XtY, XtX, beta, tau2, n, p, asig, bsig));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_t_cpp
List mcmc_t_cpp(int n_mcmc, int warm, int thin, arma::mat beta, arma::vec tau2, double sig2, arma::vec& y, arma::mat& X, double a_tau, double b_tau, double a_sig, double b_sig, arma::mat draws);
RcppExport SEXP _cplxrv_mcmc_t_cpp(SEXP n_mcmcSEXP, SEXP warmSEXP, SEXP thinSEXP, SEXP betaSEXP, SEXP tau2SEXP, SEXP sig2SEXP, SEXP ySEXP, SEXP XSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type warm(warmSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< double >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type draws(drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_t_cpp(n_mcmc, warm, thin, beta, tau2, sig2, y, X, a_tau, b_tau, a_sig, b_sig, draws));
    return rcpp_result_gen;
END_RCPP
}
// mh_log_ratio_im_cpp
double mh_log_ratio_im_cpp(double rho_re, double eta_im, double eta_im_star, arma::rowvec mut, arma::mat ymat, arma::mat sig2I);
RcppExport SEXP _cplxrv_mh_log_ratio_im_cpp(SEXP rho_reSEXP, SEXP eta_imSEXP, SEXP eta_im_starSEXP, SEXP mutSEXP, SEXP ymatSEXP, SEXP sig2ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho_re(rho_reSEXP);
    Rcpp::traits::input_parameter< double >::type eta_im(eta_imSEXP);
    Rcpp::traits::input_parameter< double >::type eta_im_star(eta_im_starSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mut(mutSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sig2I(sig2ISEXP);
    rcpp_result_gen = Rcpp::wrap(mh_log_ratio_im_cpp(rho_re, eta_im, eta_im_star, mut, ymat, sig2I));
    return rcpp_result_gen;
END_RCPP
}
// mh_log_ratio_re_cpp
double mh_log_ratio_re_cpp(double eta_re, double eta_re_star, double rho_im, arma::rowvec mut, arma::mat ymat, arma::mat sig2I);
RcppExport SEXP _cplxrv_mh_log_ratio_re_cpp(SEXP eta_reSEXP, SEXP eta_re_starSEXP, SEXP rho_imSEXP, SEXP mutSEXP, SEXP ymatSEXP, SEXP sig2ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eta_re(eta_reSEXP);
    Rcpp::traits::input_parameter< double >::type eta_re_star(eta_re_starSEXP);
    Rcpp::traits::input_parameter< double >::type rho_im(rho_imSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mut(mutSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sig2I(sig2ISEXP);
    rcpp_result_gen = Rcpp::wrap(mh_log_ratio_re_cpp(eta_re, eta_re_star, rho_im, mut, ymat, sig2I));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _cplxrv_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rcnorm_cpp
arma::mat rcnorm_cpp(int n, arma::vec mu, arma::mat var, arma::cx_double rho, bool is_real, bool is_circular);
RcppExport SEXP _cplxrv_rcnorm_cpp(SEXP nSEXP, SEXP muSEXP, SEXP varSEXP, SEXP rhoSEXP, SEXP is_realSEXP, SEXP is_circularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type var(varSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type is_real(is_realSEXP);
    Rcpp::traits::input_parameter< bool >::type is_circular(is_circularSEXP);
    rcpp_result_gen = Rcpp::wrap(rcnorm_cpp(n, mu, var, rho, is_real, is_circular));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _cplxrv_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _cplxrv_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _cplxrv_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _cplxrv_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _cplxrv_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// rho_to_eta_cpp
double rho_to_eta_cpp(double rho, double a);
RcppExport SEXP _cplxrv_rho_to_eta_cpp(SEXP rhoSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(rho_to_eta_cpp(rho, a));
    return rcpp_result_gen;
END_RCPP
}
// rrinvgauss
arma::vec rrinvgauss(int n, arma::vec mu, double lambda);
RcppExport SEXP _cplxrv_rrinvgauss(SEXP nSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rrinvgauss(n, mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rrinvgauss_vec
arma::vec rrinvgauss_vec(int n, arma::vec mu, arma::vec lambda);
RcppExport SEXP _cplxrv_rrinvgauss_vec(SEXP nSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rrinvgauss_vec(n, mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// sample_vec
arma::vec sample_vec(const arma::vec& x, int size, bool replace, const arma::vec& prob);
RcppExport SEXP _cplxrv_sample_vec(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_vec(x, size, replace, prob));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cplxrv_cplx2real_cov_cpp", (DL_FUNC) &_cplxrv_cplx2real_cov_cpp, 2},
    {"_cplxrv_dmvn_cpp", (DL_FUNC) &_cplxrv_dmvn_cpp, 4},
    {"_cplxrv_eta_to_rho_cpp", (DL_FUNC) &_cplxrv_eta_to_rho_cpp, 2},
    {"_cplxrv_get_tune_cpp", (DL_FUNC) &_cplxrv_get_tune_cpp, 6},
    {"_cplxrv_inv_cpp", (DL_FUNC) &_cplxrv_inv_cpp, 1},
    {"_cplxrv_invtau2j_bl_cpp", (DL_FUNC) &_cplxrv_invtau2j_bl_cpp, 4},
    {"_cplxrv_keep_elem", (DL_FUNC) &_cplxrv_keep_elem, 2},
    {"_cplxrv_beta_bl_cpp", (DL_FUNC) &_cplxrv_beta_bl_cpp, 4},
    {"_cplxrv_lam2_bl_cpp", (DL_FUNC) &_cplxrv_lam2_bl_cpp, 4},
    {"_cplxrv_invtau2_bl_cpp", (DL_FUNC) &_cplxrv_invtau2_bl_cpp, 3},
    {"_cplxrv_sig2_bl_cpp", (DL_FUNC) &_cplxrv_sig2_bl_cpp, 9},
    {"_cplxrv_mcmc_bl_cpp", (DL_FUNC) &_cplxrv_mcmc_bl_cpp, 14},
    {"_cplxrv_mvrnormArma1", (DL_FUNC) &_cplxrv_mvrnormArma1, 2},
    {"_cplxrv_mvrnormArma_inv", (DL_FUNC) &_cplxrv_mvrnormArma_inv, 2},
    {"_cplxrv_beta_cbl_cpp", (DL_FUNC) &_cplxrv_beta_cbl_cpp, 10},
    {"_cplxrv_ga_cbl_cpp", (DL_FUNC) &_cplxrv_ga_cbl_cpp, 4},
    {"_cplxrv_sig2_cbl_cpp", (DL_FUNC) &_cplxrv_sig2_cbl_cpp, 9},
    {"_cplxrv_lam2_cbl_cpp", (DL_FUNC) &_cplxrv_lam2_cbl_cpp, 4},
    {"_cplxrv_mh_log_re_cpp", (DL_FUNC) &_cplxrv_mh_log_re_cpp, 5},
    {"_cplxrv_mh_log_im_cpp", (DL_FUNC) &_cplxrv_mh_log_im_cpp, 5},
    {"_cplxrv_mcmc_cbl_cpp", (DL_FUNC) &_cplxrv_mcmc_cbl_cpp, 26},
    {"_cplxrv_beta_cgdp_cpp", (DL_FUNC) &_cplxrv_beta_cgdp_cpp, 10},
    {"_cplxrv_ga_cgdp_cpp", (DL_FUNC) &_cplxrv_ga_cgdp_cpp, 4},
    {"_cplxrv_sig2_cgdp_cpp", (DL_FUNC) &_cplxrv_sig2_cgdp_cpp, 9},
    {"_cplxrv_lam_cgdp_cpp", (DL_FUNC) &_cplxrv_lam_cgdp_cpp, 5},
    {"_cplxrv_mh_log_ratio_re_cpp_gdp", (DL_FUNC) &_cplxrv_mh_log_ratio_re_cpp_gdp, 8},
    {"_cplxrv_mh_log_ratio_im_cpp_gdp", (DL_FUNC) &_cplxrv_mh_log_ratio_im_cpp_gdp, 8},
    {"_cplxrv_a_cond_log_cgdp_cpp", (DL_FUNC) &_cplxrv_a_cond_log_cgdp_cpp, 5},
    {"_cplxrv_e_cond_log_cgdp_cpp", (DL_FUNC) &_cplxrv_e_cond_log_cgdp_cpp, 5},
    {"_cplxrv_mcmc_cgdp_cpp", (DL_FUNC) &_cplxrv_mcmc_cgdp_cpp, 27},
    {"_cplxrv_beta_ct_cpp", (DL_FUNC) &_cplxrv_beta_ct_cpp, 3},
    {"_cplxrv_tau2_ct_cpp", (DL_FUNC) &_cplxrv_tau2_ct_cpp, 5},
    {"_cplxrv_sig2_ct_cpp", (DL_FUNC) &_cplxrv_sig2_ct_cpp, 9},
    {"_cplxrv_mcmc_ct_cpp", (DL_FUNC) &_cplxrv_mcmc_ct_cpp, 24},
    {"_cplxrv_beta_gdp_cpp", (DL_FUNC) &_cplxrv_beta_gdp_cpp, 4},
    {"_cplxrv_invtau_gdp_cpp", (DL_FUNC) &_cplxrv_invtau_gdp_cpp, 3},
    {"_cplxrv_sig2_gdp_cpp", (DL_FUNC) &_cplxrv_sig2_gdp_cpp, 9},
    {"_cplxrv_lamj_gdp_cpp", (DL_FUNC) &_cplxrv_lamj_gdp_cpp, 4},
    {"_cplxrv_a_cond_log_cpp", (DL_FUNC) &_cplxrv_a_cond_log_cpp, 5},
    {"_cplxrv_e_cond_log_cpp", (DL_FUNC) &_cplxrv_e_cond_log_cpp, 5},
    {"_cplxrv_mcmc_gdp_cpp", (DL_FUNC) &_cplxrv_mcmc_gdp_cpp, 15},
    {"_cplxrv_beta_t_cpp", (DL_FUNC) &_cplxrv_beta_t_cpp, 4},
    {"_cplxrv_tau2_t_cpp", (DL_FUNC) &_cplxrv_tau2_t_cpp, 5},
    {"_cplxrv_sig2_t_cpp", (DL_FUNC) &_cplxrv_sig2_t_cpp, 9},
    {"_cplxrv_mcmc_t_cpp", (DL_FUNC) &_cplxrv_mcmc_t_cpp, 13},
    {"_cplxrv_mh_log_ratio_im_cpp", (DL_FUNC) &_cplxrv_mh_log_ratio_im_cpp, 6},
    {"_cplxrv_mh_log_ratio_re_cpp", (DL_FUNC) &_cplxrv_mh_log_ratio_re_cpp, 6},
    {"_cplxrv_mvrnormArma", (DL_FUNC) &_cplxrv_mvrnormArma, 3},
    {"_cplxrv_rcnorm_cpp", (DL_FUNC) &_cplxrv_rcnorm_cpp, 6},
    {"_cplxrv_rcpp_hello_world", (DL_FUNC) &_cplxrv_rcpp_hello_world, 0},
    {"_cplxrv_rcpparma_hello_world", (DL_FUNC) &_cplxrv_rcpparma_hello_world, 0},
    {"_cplxrv_rcpparma_outerproduct", (DL_FUNC) &_cplxrv_rcpparma_outerproduct, 1},
    {"_cplxrv_rcpparma_innerproduct", (DL_FUNC) &_cplxrv_rcpparma_innerproduct, 1},
    {"_cplxrv_rcpparma_bothproducts", (DL_FUNC) &_cplxrv_rcpparma_bothproducts, 1},
    {"_cplxrv_rho_to_eta_cpp", (DL_FUNC) &_cplxrv_rho_to_eta_cpp, 2},
    {"_cplxrv_rrinvgauss", (DL_FUNC) &_cplxrv_rrinvgauss, 3},
    {"_cplxrv_rrinvgauss_vec", (DL_FUNC) &_cplxrv_rrinvgauss_vec, 3},
    {"_cplxrv_sample_vec", (DL_FUNC) &_cplxrv_sample_vec, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_cplxrv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
